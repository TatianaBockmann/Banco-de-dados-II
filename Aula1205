
As opera√ß√µes DML (Data Manipulation Language ‚Äì Linguagem de Manipula√ß√£o de Dados) s√£o comandos SQL usados para inserir, atualizar, 
excluir e consultar dados dentro das tabelas de um banco de dados.

‚úÖ Principais opera√ß√µes DML:
INSERT

Insere novos registros (linhas) em uma tabela.

Exemplo:

INSERT INTO pessoa (nome, idade) VALUES ('Maria', 30);
UPDATE

Altera dados existentes em uma ou mais linhas de uma tabela.

Exemplo:

UPDATE pessoa SET idade = 31 WHERE nome = 'Maria';
DELETE

Remove dados (linhas) de uma tabela.

Exemplo:

DELETE FROM pessoa WHERE nome = 'Maria';
SELECT (embora seja tecnicamente considerada parte do DQL - Data Query Language)

Recupera dados das tabelas.

Exemplo:

SELECT * FROM pessoa;
üìå Observa√ß√µes:
Comandos DML modificam os dados, mas n√£o a estrutura das tabelas (isso √© papel do DDL ‚Äì Data Definition Language).

Ap√≥s executar comandos DML em bancos como Oracle, normalmente √© necess√°rio um COMMIT (confirma) ou ROLLBACK (desfaz) para 
finalizar ou reverter as mudan√ßas.



CREATE TABLE ORCAMENTO
   (    COD_ORCAMENTO NUMBER(10,0),
    DATA_ORCAMENTO DATE,
    VALOR_ORCAMENTO NUMBER(12,2),
    COD_PESSOA NUMBER(7,0),
    DATA_VALIDADE_ORCAMENTO DATE,
     CONSTRAINT ORCAMENTO_PK PRIMARY KEY (COD_ORCAMENTO));

insert into orcamento values (1, to_date('20/10/2021','dd/mm/rrrr'), 230, 1, to_date('20/10/2021','dd/mm/rrrr')+10);
insert into orcamento values (2, to_date('20/11/2021','dd/mm/rrrr'), 430, 3, to_date('20/11/2021','dd/mm/rrrr')+10);
insert into orcamento values (3, to_date('12/09/2021','dd/mm/rrrr'),1230, 2, to_date('12/09/2021','dd/mm/rrrr')+10);
insert into orcamento values (4, to_date('18/07/2021','dd/mm/rrrr'), 30, 1, to_date('18/07/2021','dd/mm/rrrr')+10);
insert into orcamento values (5, to_date('20/03/2022','dd/mm/rrrr'), 130, 5, to_date('20/03/2022','dd/mm/rrrr')+10);
insert into orcamento values (6, to_date('20/03/2022','dd/mm/rrrr'), 130, 5, to_date('20/03/2022','dd/mm/rrrr')+10);
insert into orcamento values (7, to_date('20/03/2022','dd/mm/rrrr'), 25, 5, to_date('20/03/2022','dd/mm/rrrr')+10);

-- Cria ou substitui o trigger chamado trg_orcamento
CREATE OR REPLACE TRIGGER trg_orcamento

-- Define que o trigger ser√° executado antes (BEFORE) de inser√ß√µes ou atualiza√ß√µes na tabela orcamento
BEFORE INSERT OR UPDATE ON orcamento

-- O trigger ser√° executado para cada linha afetada (n√£o em n√≠vel de instru√ß√£o)
FOR EACH ROW
BEGIN
    -- Verifica se o novo valor do campo VALOR_ORCAMENTO √© menor que zero
    IF :NEW.VALOR_ORCAMENTO < 0 THEN
        -- Se for negativo, gera um erro e cancela a opera√ß√£o
        RAISE_APPLICATION_ERROR(-20200, 'N√£o √© poss√≠vel inserir valor negativo');
    END IF;
END;


-- Comando que tenta atualizar a linha com COD_ORCAMENTO = 1 e atribuir valor negativo
-- Isso ir√° acionar o trigger e gerar um erro, impedindo a atualiza√ß√£o
UPDATE orcamento
SET VALOR_ORCAMENTO = -20
WHERE COD_ORCAMENTO = 1;

create table salario
( cod_salario number(5) not null,
data_salario date not null,
valor_salario number(12,2) not null,
constraint salario_pk primary key (cod_salario));

insert into salario values (1, to_date( '01/01/2013','dd/mm/rrrr'), 1000);
insert into salario values (2, to_date( '01/01/2014','dd/mm/rrrr'), 2000);
insert into salario values (3, to_date( '01/01/2015','dd/mm/rrrr'), 3000);

insert into salario values (4, to_date( '01/04/2013','dd/mm/rrrr'), 1100);
insert into salario values (5, to_date( '01/07/2014','dd/mm/rrrr'), 2200);
insert into salario values (6, to_date( '01/01/2015','dd/mm/rrrr'), 3300);


--1. Usando a tabela sal√°rio, n√£o permita quw registros posssam ser apagados
-- Cria ou substitui o trigger chamado trg_1
CREATE OR REPLACE TRIGGER trg_1

-- Define que o trigger ser√° executado antes da opera√ß√£o DELETE na tabela salario
BEFORE DELETE ON salario

-- Especifica que o trigger ser√° executado para cada linha afetada (linha por linha)
FOR EACH ROW
BEGIN
    -- Lan√ßa um erro personalizado com c√≥digo -20200 e uma mensagem
    -- Isso impede que a exclus√£o seja conclu√≠da
    RAISE_APPLICATION_ERROR(-20200, 'N√£o pode deletar');
END;
/

-- Tenta excluir o registro com COD_SALARIO = 3 da tabela salario
-- Essa opera√ß√£o acionar√° o trigger acima e resultar√° em erro
DELETE FROM salario WHERE COD_SALARIO = 3;

CREATE TABLE PESSOA (
  Id_PESSOA NUMERIC(10)   NOT NULL ,
  NOME VARCHAR(150)   NOT NULL ,
  data_aniversario DATE, --nascimento
  data_cadastro DATE,
  PRIMARY KEY(id_PESSOA));

Insert into PESSOA (ID_PESSOA,NOME,DATA_ANIVERSARIO, DATA_CADASTRO) values ('1','Jo√£o Da Silva',to_date('01/01/2020','dd/mm/rrrr'), to_date('01/01/2024','dd/mm/rrrr'));
Insert into PESSOA (ID_PESSOA,NOME,DATA_ANIVERSARIO, DATA_CADASTRO) values ('2','Maria de Lourdes',to_date('12/05/2025','dd/mm/rrrr', to_date('01/01/2014','dd/mm/rrrr'));
Insert into PESSOA (ID_PESSOA,NOME,DATA_ANIVERSARIO, DATA_CADASTRO) values ('3','Jo√£o Augusto da Luz',to_date('01/01/2015','dd/mm/rrrr', to_date('01/01/2018','dd/mm/rrrr'));

  

--2. Usando a tabela pessoa, a data de nascimento deve ser maior ou igual a hoje.
-- Cria ou substitui o trigger chamado trg_2
CREATE OR REPLACE TRIGGER trg_2

-- Define que o trigger ser√° executado antes das opera√ß√µes INSERT ou UPDATE na tabela pessoa
BEFORE INSERT OR UPDATE ON pessoa

-- O trigger ser√° aplicado a cada linha afetada
FOR EACH ROW
BEGIN
    -- Verifica se o novo valor do campo data_aniversario √© anterior √† data atual (ignorando hora)
    IF :NEW.data_aniversario < TRUNC(SYSDATE) THEN
        -- Se for anterior √† data de hoje, lan√ßa um erro e impede a opera√ß√£o
        RAISE_APPLICATION_ERROR(-20100, 'data_aniversario inv√°lida');
    END IF;
END;

-- Atualiza o valor da coluna data_aniversario para uma nova data
UPDATE pessoa
SET data_aniversario = TO_DATE('01/01/2020', 'DD/MM/RRRR')  -- Converte a string para um tipo DATE no formato dia/m√™s/ano
WHERE ID_PESSOA = 1;  -- Aplica a altera√ß√£o somente ao registro com ID_PESSOA igual a 1

--3.Na tabela pessoa, a data de cadastro deve ser maior ou igual a hoje

-- Cria ou substitui o trigger chamado trg_3
CREATE OR REPLACE TRIGGER trg_3

-- O trigger ser√° disparado antes de uma opera√ß√£o INSERT ou UPDATE na tabela pessoa
BEFORE INSERT OR UPDATE ON pessoa

-- Executa o trigger para cada linha afetada
FOR EACH ROW
BEGIN
    -- Verifica se o novo valor de data_cadastro √© anterior √† data atual (sem considerar hora)
    IF :NEW.data_cadastro < TRUNC(SYSDATE) THEN
        -- Se a data for anterior a hoje, lan√ßa erro e impede a opera√ß√£o
        RAISE_APPLICATION_ERROR(-20100, 'data_cadastro inv√°lida');
    END IF;
END;

-- Tenta atualizar o campo data_cadastro da pessoa com ID 2
UPDATE pessoa
SET data_cadastro = TO_DATE('01/01/2014', 'DD/MM/RRRR')  -- Converte a string para data: 1¬∫ de janeiro de 2014
WHERE ID_PESSOA = 2;  -- Aplica a altera√ß√£o apenas √† pessoa com ID_PESSOA igual a 2

--Exerc√≠cio2
--Tabelas de logui n√£o tem PK
CREATE TABLE LOGUI
   (MENSAGEM VARCHAR2(100),
    USUARIO VARCHAR2(50),
    DATA_MOV DATE,
    TP_MOV VARCHAR2(1));

--Usando a tabela sal√°rio, copie todas as opera√ß√µes DML para a tabela logui
CREATE OR REPLACE TRIGGER trg_salario
BEFORE INSERT OR UPDATE OR DELETE ON salario
FOR EACH ROW
BEGIN
-- Quando for uma inser√ß√£o
    IF INSERTING THEN
        INSERT INTO logui 
        VALUES (:NEW.COD_FUNCIONARIO || '-' || :NEW.VALOR_SALARIO, USER, SYSDATE, 'I');

    -- Quando for uma atualiza√ß√£o
    ELSIF UPDATING THEN
        INSERT INTO logui 
        VALUES (:NEW.COD_FUNCIONARIO || '-' || :NEW.VALOR_SALARIO, USER, SYSDATE, 'U');

    -- Quando for uma exclus√£o
    ELSIF DELETING THEN
        INSERT INTO logui 
        VALUES (:OLD.COD_FUNCIONARIO || '-' || :OLD.VALOR_SALARIO, USER, SYSDATE, 'D');
    END IF;
END;
