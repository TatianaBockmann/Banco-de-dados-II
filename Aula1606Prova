CREATE
TABLE "CIDADE"
("COD_CIDADE" NUMBER(38,0),
"NOME_CIDADE" VARCHAR2(40 BYTE),
"UF" VARCHAR2(2 BYTE),
"PAIS" VARCHAR2(75 BYTE) );
--Constraints for Table CIDADE

ALTER TABLE "CIDADE" ADD PRIMARY KEY ("COD_CIDADE");
ALTER TABLE "CIDADE" MODIFY ("PAIS" NOT NULL ENABLE);
ALTER TABLE "CIDADE" MODIFY ("NOME_CIDADE" NOT NULL ENABLE);
ALTER TABLE "CIDADE" MODIFY ("COD_CIDADE" NOT NULL ENABLE);      

Insert into "CIDADE" ("COD_CIDADE","NOME_CIDADE","UF","PAIS") values ('1','NOVO HAMBURGO','RS','BRASIL');
Insert into "CIDADE" ("COD_CIDADE","NOME_CIDADE","UF","PAIS") values ('2','SAO LEOPOLDO','RS','BRASIL');
Insert into "CIDADE" ("COD_CIDADE","NOME_CIDADE","UF","PAIS") values ('3','PORTO ALEGRE','RS','BRASIL');
Insert into "CIDADE" ("COD_CIDADE","NOME_CIDADE","UF","PAIS") values ('4','ARARICA','RS','BRASIL');

CREATE
TABLE "PESSOA"
("COD_PESSOA" NUMBER(10,0),
 "COD_CIDADE" NUMBER(38,0),
"NOME" VARCHAR2(100 BYTE),
"RUA" VARCHAR2(100 BYTE));
--Constraints for Table PESSOA

ALTER TABLE "PESSOA" ADD PRIMARY KEY ("COD_PESSOA");
ALTER TABLE "PESSOA" MODIFY ("RUA" NOT NULL ENABLE);
ALTER TABLE "PESSOA" MODIFY ("NOME" NOT NULL ENABLE);
ALTER TABLE "PESSOA" MODIFY ("COD_CIDADE" NOT NULL ENABLE);
ALTER TABLE "PESSOA" MODIFY ("COD_PESSOA" NOT NULL ENABLE);
ALTER TABLE "PESSOA" ADD FOREIGN KEY ("COD_CIDADE") REFERENCES "CIDADE" ("COD_CIDADE") ENABLE;

Insert into "PESSOA" ("COD_PESSOA","COD_CIDADE","NOME","RUA") values ('1','4','JOAO','GIRASSOL');
Insert into "PESSOA" ("COD_PESSOA","COD_CIDADE","NOME","RUA") values ('2','3','MARIA','QUERO-QUERO');
Insert into "PESSOA" ("COD_PESSOA","COD_CIDADE","NOME","RUA") values ('3','2','JOEL','GIRANDIA');
Insert into "PESSOA" ("COD_PESSOA","COD_CIDADE","NOME","RUA") values ('4','1','CRISTINA','SOL');

CREATE TABLE "TITULO_CONTAS_RECEBER"
 ("NUM_TITULO" NUMBER(10,0),
 "SERIE_TITULO" VARCHAR2(10 BYTE),
 "COD_PESSOA" NUMBER(10,0),
 "DATA_EMISSAO" DATE,
  "VALOR_TITULO" NUMBER(12,2),
  "NUMERO_PARCELAS" NUMBER(2,0),
  "OBSERVACAO" VARCHAR2(150 BYTE));

INSERT INTO "TITULO_CONTAS_RECEBER" ("NUM_TITULO", "SERIE_TITULO", "COD_PESSOA", "DATA_EMISSAO", "VALOR_TITULO", "NUMERO_PARCELAS", "OBSERVACAO")
VALUES (1, '1', 1, TO_DATE('01/09/10', 'DD/MM/RR'), 500, 5, 'AMARELO');

INSERT INTO "TITULO_CONTAS_RECEBER" ("NUM_TITULO", "SERIE_TITULO", "COD_PESSOA", "DATA_EMISSAO", "VALOR_TITULO", "NUMERO_PARCELAS", "OBSERVACAO")
VALUES (2, '2', 2, TO_DATE('01/09/10', 'DD/MM/RR'), 400, 6, 'VERDE');

INSERT INTO "TITULO_CONTAS_RECEBER" ("NUM_TITULO", "SERIE_TITULO", "COD_PESSOA", "DATA_EMISSAO", "VALOR_TITULO", "NUMERO_PARCELAS", "OBSERVACAO")
VALUES (3, '3', 3, TO_DATE('01/09/10', 'DD/MM/RR'), 450, 3, 'ROSA');

INSERT INTO "TITULO_CONTAS_RECEBER" ("NUM_TITULO", "SERIE_TITULO", "COD_PESSOA", "DATA_EMISSAO", "VALOR_TITULO", "NUMERO_PARCELAS", "OBSERVACAO")
VALUES (4, '4', 4, TO_DATE('01/09/10', 'DD/MM/RR'), 320, 4, 'VERMELHO');

--Constraints for Table TITULO_CONTAS_RECEBER
ALTER TABLE "TITULO_CONTAS_RECEBER" ADD PRIMARY KEY ("NUM_TITULO");
ALTER TABLE "TITULO_CONTAS_RECEBER" MODIFY ("NUMERO_PARCELAS" NOT NULL ENABLE);
ALTER TABLE "TITULO_CONTAS_RECEBER" MODIFY ("VALOR_TITULO" NOT NULL ENABLE);
ALTER TABLE "TITULO_CONTAS_RECEBER" MODIFY ("DATA_EMISSAO" NOT NULL ENABLE);
ALTER TABLE "TITULO_CONTAS_RECEBER" MODIFY ("COD_PESSOA" NOT NULL ENABLE);
ALTER TABLE "TITULO_CONTAS_RECEBER" MODIFY ("NUM_TITULO" NOT NULL ENABLE);
ALTER TABLE "TITULO_CONTAS_RECEBER" ADD FOREIGN KEY ("COD_PESSOA") REFERENCES "PESSOA" ("COD_PESSOA") ENABLE;

Alter table Titulo_Contas_Receber Add valor_pago number(12,2);

CREATE TABLE "HISTORICO_CONTAS_RECEBER"
("NUM_TITULO" NUMBER(10,0),
"SEQ_HISTORICO" NUMBER(3,0),
"DATA_MOVIMENTO" DATE,
"DATA_PAGAMENTO" DATE,
"VALOR_PAGO" NUMBER(17,0),
"OBSERVACAO" VARCHAR2(100 BYTE));

ALTER TABLE "HISTORICO_CONTAS_RECEBER" ADD CONSTRAINT "HISTORICO_CONTAS_RECEBER_PK" PRIMARY KEY ("NUM_TITULO", "SEQ_HISTORICO");
ALTER TABLE "HISTORICO_CONTAS_RECEBER" MODIFY ("DATA_MOVIMENTO" NOT NULL ENABLE);
ALTER TABLE "HISTORICO_CONTAS_RECEBER" MODIFY ("SEQ_HISTORICO" NOT NULL ENABLE);
ALTER TABLE "HISTORICO_CONTAS_RECEBER" MODIFY ("NUM_TITULO" NOT NULL ENABLE);

create table Informacao
(dataInfo date,
info varchar2(200));
 
ALTER TABLE "HISTORICO_CONTAS_RECEBER" ADD CONSTRAINT
"HIST_CRC_TIT_CRC_FK" FOREIGN KEY ("NUM_TITULO") REFERENCES "TITULO_CONTAS_RECEBER" ("NUM_TITULO") ENABLE;

--1. Na tabela TITULO_CONTAS_RECEBER, na inclusão e na alteração ,   a trigger deve restringir  : valor do titulo menor que 0 e o nº parcelas deve estar 
--entre 1 e 10 (inclusive).

--CREATE OR REPLACE TRIGGER TRG_VALIDA_TITULO_CRC
--BEFORE INSERT OR UPDATE ON TITULO_CONTAS_RECEBER
--FOR EACH ROW
--BEGIN
   -- IF :NEW.VALOR_TITULO < 0 THEN
        --RAISE_APPLICATION_ERROR(-20001, 'O valor do título não pode ser menor que zero.');
    --END IF;

    --IF :NEW.NUMERO_PARCELAS < 1 OR :NEW.NUMERO_PARCELAS > 10 THEN
        --RAISE_APPLICATION_ERROR(-20002, 'O número de parcelas deve estar entre 1 e 10.');
    --END IF;
--END;

CREATE OR REPLACE TRIGGER "TRG_VALIDA_TITULO"
BEFORE INSERT OR UPDATE ON "TITULO_CONTAS_RECEBER"
FOR EACH ROW
BEGIN
    IF :NEW."VALOR_TITULO" < 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'O valor do título não pode ser menor que zero.');
    END IF;

    IF :NEW."NUMERO_PARCELAS" < 1 OR :NEW."NUMERO_PARCELAS" > 10 THEN
        RAISE_APPLICATION_ERROR(-20002, 'O número de parcelas deve estar entre 1 e 10.');
    END IF;
END;

INSERT INTO "TITULO_CONTAS_RECEBER" ("NUM_TITULO", "SERIE_TITULO", "COD_PESSOA", "DATA_EMISSAO", "VALOR_TITULO", "NUMERO_PARCELAS", "OBSERVACAO")
VALUES (1, 'A1', 1, TO_DATE('2023-06-01', 'YYYY-MM-DD'), -50, 5, 'Teste de erro');

--Toda ação DML na tabela cidade deve gerar uma cópia na tebela info (cod_cidade, nome, uf, pais).
CREATE TABLE "INFO_CIDADE" (
    "COD_CIDADE" NUMBER(38,0),
    "NOME_CIDADE" VARCHAR2(40 BYTE),
    "UF" VARCHAR2(2 BYTE),
    "PAIS" VARCHAR2(75 BYTE),
    "USUARIO" VARCHAR2(100),
    "TP_MOV" VARCHAR2(1),
    "DATA_MOV" DATE);


CREATE TABLE "INF_CIDADE" (
    "COD_CIDADE" NUMBER(38,0),
    "NOME_CIDADE" VARCHAR2(40 BYTE),
    "UF" VARCHAR2(2 BYTE),
    "PAIS" VARCHAR2(75 BYTE),
    "USUARIO" VARCHAR2(100),
    "TP_MOV" VARCHAR2(100),
    "DATA_MOV" DATE);
--CREATE OR REPLACE TRIGGER "TRG_INFO_CIDADE"
--AFTER INSERT OR UPDATE OR DELETE ON "CIDADE"
--FOR EACH ROW
--DECLARE
   --v_usuario VARCHAR2(10);
--BEGIN
     
     --SELECT USER INTO v_usuario FROM DUAL;

    --IF INSERTING THEN
        
      --  INSERT INTO "INFO_CIDADE" ("COD_CIDADE", "NOME_CIDADE", "UF", "PAIS", "USUARIO", "TP_MOV", "DATA_MOV")
       -- VALUES (:NEW."COD_CIDADE", :NEW."NOME_CIDADE", :NEW."UF", :NEW."PAIS", v_usuario, 'I', SYSDATE);

    --ELSIF UPDATING THEN
       
      --  INSERT INTO "INFO_CIDADE" ("COD_CIDADE", "NOME_CIDADE", "UF", "PAIS", "USUARIO", "TP_MOV", "DATA_MOV")
        --VALUES (:NEW."COD_CIDADE", :NEW."NOME_CIDADE", :NEW."UF", :NEW."PAIS", v_usuario, 'U', SYSDATE);

   -- ELSIF DELETING THEN
        
       -- INSERT INTO "INFO_CIDADE" ("COD_CIDADE", "NOME_CIDADE", "UF", "PAIS", "USUARIO", "TP_MOV", "DATA_MOV")
       -- VALUES (:OLD."COD_CIDADE", :OLD."NOME_CIDADE", :OLD."UF", :OLD."PAIS", v_usuario, 'D', SYSDATE);
   -- END IF;
--END;

CREATE OR REPLACE TRIGGER "TRG_INFO_CIDADE"
AFTER INSERT OR UPDATE OR DELETE ON "CIDADE"
FOR EACH ROW
DECLARE
    v_usuario VARCHAR2(100);
BEGIN
     
     SELECT USER INTO v_usuario FROM DUAL;

    IF INSERTING THEN
        
        INSERT INTO "INFO_CIDADE" ("COD_CIDADE", "NOME_CIDADE", "UF", "PAIS", "USUARIO", "TP_MOV", "DATA_MOV")
        VALUES (:NEW."COD_CIDADE", :NEW."NOME_CIDADE", :NEW."UF", :NEW."PAIS", v_usuario, 'I', SYSDATE);

    ELSIF UPDATING THEN
       
        INSERT INTO "INFO_CIDADE" ("COD_CIDADE", "NOME_CIDADE", "UF", "PAIS", "USUARIO", "TP_MOV", "DATA_MOV")
        VALUES (:NEW."COD_CIDADE", :NEW."NOME_CIDADE", :NEW."UF", :NEW."PAIS", v_usuario, 'U', SYSDATE);

    ELSIF DELETING THEN
        
        INSERT INTO "INFO_CIDADE" ("COD_CIDADE", "NOME_CIDADE", "UF", "PAIS", "USUARIO", "TP_MOV", "DATA_MOV")
        VALUES (:OLD."COD_CIDADE", :OLD."NOME_CIDADE", :OLD."UF", :OLD."PAIS", v_usuario, 'D', SYSDATE);
    END IF;
END;



CREATE OR REPLACE TRIGGER "TRG_INFO_CIDADE"
AFTER INSERT OR UPDATE OR DELETE ON "CIDADE"
FOR EACH ROW
DECLARE
    v_usuario VARCHAR2(100);
BEGIN
     
     SELECT USER INTO v_usuario FROM DUAL;

    IF INSERTING THEN
        INSERT INTO "INFO_CIDADE" ("COD_CIDADE", "NOME_CIDADE", "UF", "PAIS", "USUARIO", "TP_MOV", "DATA_MOV")
        VALUES (:NEW."COD_CIDADE", :NEW."NOME_CIDADE", :NEW."UF", :NEW."PAIS", v_usuario, 'I', SYSDATE);

    ELSIF UPDATING THEN
        INSERT INTO "INFO_CIDADE" ("COD_CIDADE", "NOME_CIDADE", "UF", "PAIS", "USUARIO", "TP_MOV", "DATA_MOV")
        VALUES (:NEW."COD_CIDADE", :NEW."NOME_CIDADE", :NEW."UF", :NEW."PAIS", v_usuario, 'U', SYSDATE);

    ELSIF DELETING THEN
        INSERT INTO "INFO_CIDADE" ("COD_CIDADE", "NOME_CIDADE", "UF", "PAIS", "USUARIO", "TP_MOV", "DATA_MOV")
        VALUES (:OLD."COD_CIDADE", :OLD."NOME_CIDADE", :OLD."UF", :OLD."PAIS", v_usuario, 'D', SYSDATE);
    END IF;
END;
INSERT INTO "CIDADE" ("COD_CIDADE", "NOME_CIDADE", "UF", "PAIS")
VALUES ('5', 'SAO PAULO', 'SP', 'BRASIL');

UPDATE "CIDADE"
SET "NOME_CIDADE" = 'SAO PAULO'
WHERE "COD_CIDADE" = 4;

DELETE FROM "CIDADE"
WHERE "COD_CIDADE" = 5;

select*from  "CIDADE"
SELECT*FROM "INFO_CIDADE"

INSERT INTO "CIDADE" ("COD_CIDADE", "NOME_CIDADE", "UF", "PAIS")
VALUES (6, 'RIO DE JANEIRO', 'RJ', 'BRASIL');
--3. Construa uma view mostrando o nome da pessoa, o nome da cidade, o número do título, a data de emissão do título e o valor do título.


CREATE OR REPLACE VIEW "VW_PESSOA_TITULO_CIDADE" AS
SELECT
    "P"."NOME" AS "NOME_PESSOA",
    "C"."NOME_CIDADE",
    "T"."NUM_TITULO",
    "T"."DATA_EMISSAO",
    "T"."VALOR_TITULO"
FROM
    "TITULO_CONTAS_RECEBER" "T"
    JOIN "PESSOA" "P" ON "T"."COD_PESSOA" = "P"."COD_PESSOA"
    JOIN "CIDADE" "C" ON "P"."COD_CIDADE" = "C"."COD_CIDADE";
--FUNCIONOU
CREATE OR REPLACE VIEW "VW_PESSOA_TITULO_CIDADE" AS
SELECT
    "P"."NOME" AS "NOME_PESSOA",
    "C"."NOME_CIDADE",
    "T"."NUM_TITULO",
    "T"."DATA_EMISSAO",
    "T"."VALOR_TITULO"
FROM
    "TITULO_CONTAS_RECEBER" "T"
    JOIN "PESSOA" "P" ON "T"."COD_PESSOA" = "P"."COD_PESSOA"
    JOIN "CIDADE" "C" ON "P"."COD_CIDADE" = "C"."COD_CIDADE";

SELECT * FROM "VW_PESSOA_TITULO_CIDADE";

CREATE OR REPLACE VIEW "VW_PESSOA_TITULO_CIDADE" AS
SELECT PESSOA.ID_PESSOA,
    PESSOA.NOME,

CREATE OR REPLACE VIEW "VW_PESSOA_TITULO_CIDADE" AS
SELECT
    "P"."NOME" AS "NOME_PESSOA",
    (SELECT "C"."NOME_CIDADE" 
     FROM "CIDADE" "C" 
     WHERE "C"."COD_CIDADE" = "P"."COD_CIDADE" 
     AND ROWNUM = 1) AS "NOME_CIDADE",  -- Subconsulta para o nome da cidade
    (SELECT "T"."NUM_TITULO" 
     FROM "TITULO_CONTAS_RECEBER" "T" 
     WHERE "T"."COD_PESSOA" = "P"."COD_PESSOA" 
     AND ROWNUM = 1) AS "NUM_TITULO",  -- Subconsulta para o número do título
    (SELECT "T"."DATA_EMISSAO" 
     FROM "TITULO_CONTAS_RECEBER" "T" 
     WHERE "T"."COD_PESSOA" = "P"."COD_PESSOA" 
     AND ROWNUM = 1) AS "DATA_EMISSAO",  -- Subconsulta para a data de emissão
    (SELECT "T"."VALOR_TITULO" 
     FROM "TITULO_CONTAS_RECEBER" "T" 
     WHERE "T"."COD_PESSOA" = "P"."COD_PESSOA" 


entreguei
1.   Na tabela TITULO_CONTAS_RECEBER, na inclusão e na alteração ,   a trigger deve restringir  : valor do titulo menor que 0 e o nº parcelas deve estar entre 1 e 10 (inclusive).

CREATE OR REPLACE TRIGGER "TRG_VALIDA_TITULO"
BEFORE INSERT OR UPDATE ON "TITULO_CONTAS_RECEBER"
FOR EACH ROW
BEGIN
    IF :NEW."VALOR_TITULO" < 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'O valor do título não pode ser menor que zero.');
    END IF;

    IF :NEW."NUMERO_PARCELAS" < 1 OR :NEW."NUMERO_PARCELAS" > 10 THEN
        RAISE_APPLICATION_ERROR(-20002, 'O número de parcelas deve estar entre 1 e 10.');
    END IF;
END;


2.Toda ação DML na tabela cidade deve gerar uma cópia na tebela info (cod_cidade, nome, uf, pais).
CREATE OR REPLACE TRIGGER "TRG_INFO_CIDADE"
AFTER INSERT OR UPDATE OR DELETE ON "CIDADE"
FOR EACH ROW
DECLARE
    v_usuario VARCHAR2(100);
BEGIN
     
     SELECT USER INTO v_usuario FROM DUAL;

    IF INSERTING THEN
        INSERT INTO "INFO_CIDADE" ("COD_CIDADE", "NOME_CIDADE", "UF", "PAIS", "USUARIO", "TP_MOV", "DATA_MOV")
        VALUES (:NEW."COD_CIDADE", :NEW."NOME_CIDADE", :NEW."UF", :NEW."PAIS", v_usuario, 'I', SYSDATE);

    ELSIF UPDATING THEN
        INSERT INTO "INFO_CIDADE" ("COD_CIDADE", "NOME_CIDADE", "UF", "PAIS", "USUARIO", "TP_MOV", "DATA_MOV")
        VALUES (:NEW."COD_CIDADE", :NEW."NOME_CIDADE", :NEW."UF", :NEW."PAIS", v_usuario, 'U', SYSDATE);

    ELSIF DELETING THEN
        INSERT INTO "INFO_CIDADE" ("COD_CIDADE", "NOME_CIDADE", "UF", "PAIS", "USUARIO", "TP_MOV", "DATA_MOV")
        VALUES (:OLD."COD_CIDADE", :OLD."NOME_CIDADE", :OLD."UF", :OLD."PAIS", v_usuario, 'D', SYSDATE);
    END IF;
END;


3. Construa uma view mostrando o nome da pessoa, o nome da cidade, o número do título, a data de emissão do título e o valor do título.

CREATE OR REPLACE VIEW "VW_PESSOA_TITULO_CIDADE" AS
SELECT
    "P"."NOME" AS "NOME_PESSOA",
    "C"."NOME_CIDADE",
    "T"."NUM_TITULO",
    "T"."DATA_EMISSAO",
    "T"."VALOR_TITULO"
FROM
    "TITULO_CONTAS_RECEBER" "T"
    JOIN "PESSOA" "P" ON "T"."COD_PESSOA" = "P"."COD_PESSOA"
    JOIN "CIDADE" "C" ON "P"."COD_CIDADE" = "C"."COD_CIDADE";




    
