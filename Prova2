CREATE
TABLE "CIDADE"
("COD_CIDADE" NUMBER(38,0),
"NOME_CIDADE" VARCHAR2(40 BYTE),
"UF" VARCHAR2(2 BYTE),
"PAIS" VARCHAR2(75 BYTE) );
--Constraints for Table CIDADE

ALTER TABLE "CIDADE" ADD PRIMARY KEY ("COD_CIDADE");
ALTER TABLE "CIDADE" MODIFY ("PAIS" NOT NULL ENABLE);
ALTER TABLE "CIDADE" MODIFY ("NOME_CIDADE" NOT NULL ENABLE);
ALTER TABLE "CIDADE" MODIFY ("COD_CIDADE" NOT NULL ENABLE);      

CREATE
TABLE "PESSOA"
("COD_PESSOA" NUMBER(10,0),
 "COD_CIDADE" NUMBER(38,0),
"NOME" VARCHAR2(100 BYTE),
"RUA" VARCHAR2(100 BYTE));
--Constraints for Table PESSOA

ALTER TABLE "PESSOA" ADD PRIMARY KEY ("COD_PESSOA");
ALTER TABLE "PESSOA" MODIFY ("RUA" NOT NULL ENABLE);
ALTER TABLE "PESSOA" MODIFY ("NOME" NOT NULL ENABLE);
ALTER TABLE "PESSOA" MODIFY ("COD_CIDADE" NOT NULL ENABLE);
ALTER TABLE "PESSOA" MODIFY ("COD_PESSOA" NOT NULL ENABLE);

--Ref Constraints for Table PESSOA
ALTER
TABLE "PESSOA" ADD FOREIGN KEY ("COD_CIDADE")

 
    REFERENCES
"CIDADE" ("COD_CIDADE") ENABLE;

CREATE TABLE "TITULO_CONTAS_RECEBER"
 ("NUM_TITULO" NUMBER(10,0),
 "SERIE_TITULO" VARCHAR2(10 BYTE),
 "COD_PESSOA" NUMBER(10,0),
 "DATA_EMISSAO" DATE,
  "VALOR_TITULO" NUMBER(12,2),
  "NUMERO_PARCELAS" NUMBER(2,0),
  "OBSERVACAO" VARCHAR2(150 BYTE));

--Constraints for Table TITULO_CONTAS_RECEBER
ALTER TABLE "TITULO_CONTAS_RECEBER" ADD PRIMARY KEY ("NUM_TITULO");
ALTER TABLE "TITULO_CONTAS_RECEBER" MODIFY ("NUMERO_PARCELAS" NOT NULL ENABLE);
ALTER TABLE "TITULO_CONTAS_RECEBER" MODIFY ("VALOR_TITULO" NOT NULL ENABLE);
ALTER TABLE "TITULO_CONTAS_RECEBER" MODIFY ("DATA_EMISSAO" NOT NULL ENABLE);
ALTER TABLE "TITULO_CONTAS_RECEBER" MODIFY ("COD_PESSOA" NOT NULL ENABLE);
ALTER TABLE "TITULO_CONTAS_RECEBER" MODIFY ("NUM_TITULO" NOT NULL ENABLE);

--Ref Constraints for Table TITULO_CONTAS_RECEBER
ALTER TABLE "TITULO_CONTAS_RECEBER" ADD FOREIGN KEY ("COD_PESSOA")
REFERENCES "PESSOA" ("COD_PESSOA") ENABLE;

Alter table Titulo_Contas_Receber Add valor_pago number(12,2);

CREATE TABLE "HISTORICO_CONTAS_RECEBER"
("NUM_TITULO" NUMBER(10,0),
"SEQ_HISTORICO" NUMBER(3,0),
"DATA_MOVIMENTO" DATE,
"DATA_PAGAMENTO" DATE,
"VALOR_PAGO" NUMBER(17,0),
"OBSERVACAO" VARCHAR2(100 BYTE));

ALTER TABLE "HISTORICO_CONTAS_RECEBER" ADD CONSTRAINT "HISTORICO_CONTAS_RECEBER_PK" PRIMARY KEY ("NUM_TITULO", "SEQ_HISTORICO");
ALTER TABLE "HISTORICO_CONTAS_RECEBER" MODIFY ("DATA_MOVIMENTO" NOT NULL ENABLE);
ALTER TABLE "HISTORICO_CONTAS_RECEBER" MODIFY ("SEQ_HISTORICO" NOT NULL ENABLE);
ALTER TABLE "HISTORICO_CONTAS_RECEBER" MODIFY ("NUM_TITULO" NOT NULL ENABLE);

create table Informacao 
(dataInfo date,
info varchar2(200));





 
ALTER
TABLE "HISTORICO_CONTAS_RECEBER" ADD CONSTRAINT
"HIST_CRC_TIT_CRC_FK" FOREIGN KEY ("NUM_TITULO")

 
    REFERENCES
"TITULO_CONTAS_RECEBER" ("NUM_TITULO") ENABLE;
 Na tabela TITULO_CONTAS_RECEBER, na inclus√£o e na altera√ß√£o ,   a trigger deve restringir  : valor do titulo menor que 0 e o n¬∫ parcelas deve estar entre 1 e 10 (inclusive).
      nesse tipo de modelo

O ChatGPT disse:
Para implementar essa l√≥gica de valida√ß√£o (restri√ß√£o do valor do t√≠tulo e n√∫mero de parcelas) na tabela TITULO_CONTAS_RECEBER, voc√™ pode criar uma trigger BEFORE INSERT OR UPDATE que verificar√° se os valores atendem √†s regras:

‚úÖ Regras a implementar:
VALOR_TITULO n√£o pode ser menor que 0

NUMERO_PARCELAS deve estar entre 1 e 10 (inclusive)

üîß C√≥digo da Trigger:
sql
Copiar
Editar
CREATE OR REPLACE TRIGGER TRG_VALIDA_TITULO_CRC
BEFORE INSERT OR UPDATE ON TITULO_CONTAS_RECEBER
FOR EACH ROW
BEGIN
    IF :NEW.VALOR_TITULO < 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'O valor do t√≠tulo n√£o pode ser menor que zero.');
    END IF;

    IF :NEW.NUMERO_PARCELAS < 1 OR :NEW.NUMERO_PARCELAS > 10 THEN
        RAISE_APPLICATION_ERROR(-20002, 'O n√∫mero de parcelas deve estar entre 1 e 10.');
    END IF;
END;
/
üìå Observa√ß√µes:
Essa trigger ser√° executada automaticamente sempre que houver um INSERT ou UPDATE na tabela TITULO_CONTAS_RECEBER.

O RAISE_APPLICATION_ERROR gera um erro e impede a opera√ß√£o, garantindo que as regras sejam cumpridas.

Os c√≥digos de erro personalizados (-20001, -20002) devem estar entre -20000 e -20999, que s√£o permitidos para aplica√ß√µes no Oracle.

Se quiser ajuda com mais valida√ß√µes ou implementar triggers similares em outras tabelas, posso ajudar com isso tamb√©m.



Voc√™ disse:
Toda a√ß√£o DML na tabela cidade deve gerar uma c√≥pia na tebela info (cod_cidade, nome, uf, pais).

O ChatGPT disse:
Para registrar toda a√ß√£o DML (INSERT, UPDATE ou DELETE) na tabela CIDADE e gravar os dados modificados na tabela INFORMACAO, voc√™ precisa:

Alterar a tabela INFORMACAO para incluir as colunas necess√°rias (COD_CIDADE, NOME_CIDADE, UF, PAIS e talvez a opera√ß√£o).

Criar uma trigger AFTER INSERT OR UPDATE OR DELETE na tabela CIDADE para copiar os dados.

‚úÖ 1. Altera√ß√£o da tabela INFORMACAO:
Vamos adicionar os campos para armazenar os dados da CIDADE:

sql
Copiar
Editar
DROP TABLE INFORMACAO;

CREATE TABLE INFORMACAO (
    DATAINFO     DATE,
    OPERACAO     VARCHAR2(10),
    COD_CIDADE   NUMBER(38,0),
    NOME_CIDADE  VARCHAR2(40 BYTE),
    UF           VARCHAR2(2 BYTE),
    PAIS         VARCHAR2(75 BYTE)
);
‚úÖ 2. Trigger para gravar as a√ß√µes da tabela CIDADE:
sql
Copiar
Editar
CREATE OR REPLACE TRIGGER TRG_LOG_CIDADE
AFTER INSERT OR UPDATE OR DELETE ON CIDADE
FOR EACH ROW
DECLARE
    v_operacao VARCHAR2(10);
BEGIN
    IF INSERTING THEN
        v_operacao := 'INSERT';
        INSERT INTO INFORMACAO (DATAINFO, OPERACAO, COD_CIDADE, NOME_CIDADE, UF, PAIS)
        VALUES (SYSDATE, v_operacao, :NEW.COD_CIDADE, :NEW.NOME_CIDADE, :NEW.UF, :NEW.PAIS);

    ELSIF UPDATING THEN
        v_operacao := 'UPDATE';
        INSERT INTO INFORMACAO (DATAINFO, OPERACAO, COD_CIDADE, NOME_CIDADE, UF, PAIS)
        VALUES (SYSDATE, v_operacao, :NEW.COD_CIDADE, :NEW.NOME_CIDADE, :NEW.UF, :NEW.PAIS);

    ELSIF DELETING THEN
        v_operacao := 'DELETE';
        INSERT INTO INFORMACAO (DATAINFO, OPERACAO, COD_CIDADE, NOME_CIDADE, UF, PAIS)
        VALUES (SYSDATE, v_operacao, :OLD.COD_CIDADE, :OLD.NOME_CIDADE, :OLD.UF, :OLD.PAIS);
    END IF;
END;
/
üìù Resultado:
Com isso, qualquer inser√ß√£o, atualiza√ß√£o ou exclus√£o na tabela CIDADE ser√° logada automaticamente na tabela INFORMACAO com a data/hora e o tipo de opera√ß√£o.

Se quiser tamb√©m incluir o usu√°rio (USER) ou terminal, posso ajudar a estender a trigger para isso.



Voc√™ disse:
3. Construa uma view mostrando o nome da pessoa, o nome da cidade, o n√∫mero do t√≠tulo, a data de emiss√£o do t√≠tulo e o valor do t√≠tulo.

O ChatGPT disse:
Para criar uma view que mostre:

Nome da pessoa (PESSOA.NOME)

Nome da cidade (CIDADE.NOME_CIDADE)

N√∫mero do t√≠tulo (TITULO_CONTAS_RECEBER.NUM_TITULO)

Data de emiss√£o (TITULO_CONTAS_RECEBER.DATA_EMISSAO)

Valor do t√≠tulo (TITULO_CONTAS_RECEBER.VALOR_TITULO)

Voc√™ pode usar JOINs entre as tabelas TITULO_CONTAS_RECEBER, PESSOA e CIDADE.

‚úÖ SQL para a VIEW:
sql
Copiar
Editar
CREATE OR REPLACE VIEW VW_PESSOA_TITULO_CIDADE AS
SELECT
    P.NOME AS NOME_PESSOA,
    C.NOME_CIDADE,
    T.NUM_TITULO,
    T.DATA_EMISSAO,
    T.VALOR_TITULO
FROM
    TITULO_CONTAS_RECEBER T
    JOIN PESSOA P ON T.COD_PESSOA = P.COD_PESSOA
    JOIN CIDADE C ON P.COD_CIDADE = C.COD_CIDADE;
üîç Exemplo de uso:
sql
Copiar
Editar
SELECT * FROM VW_PESSOA_TITULO_CIDADE;
Se quiser incluir mais colunas, aplicar filtros (por exemplo, t√≠tulos com valor > 1000), ou formatar datas/valores, posso ajustar a view conforme necess√°rio.
