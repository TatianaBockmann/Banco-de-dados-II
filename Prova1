create table Produto
(IdProduto Number(5),
Descricao Varchar2(100),
ValorProduto Number(12,2),
ProdAtivoInativo Varchar2(1),
Constraint PRODUTO_PK
Primary key(IdProduto));

insert into Produto values(1,'Máquina de lavar', 2560, 'a');
insert into Produto values(2,'mangueira', 200, 'i');
insert into Produto values(3,'Guarda-Roupas', 1800, 'a');
insert into Produto values(4,'Roda', 560, 'i');
insert into Produto values(5,'Pneu', 236, 'i');
insert into Produto values(6,'Soquete', 12, 'a');
insert into Produto values(7,'Chave seta', 98, 'a');
insert into Produto values(8,'Chave de boca', 19, 'i');
insert into Produto values(9,'Alicate', 36, 'a');
insert into Produto values(10,'Tesoura', 15, 'a');

--1. Faça uma função que retorna a descrição do produto. Passe o IdProduto como parâmetro.

Create or replace function fn_desc_prod
(Param_cod_produto in Number)  
Return Varchar2  
IS  
    Cursor C_desc_prod IS  
    SELECT produto.Descricao
    FROM produto
    WHERE produto.IdProduto = Param_cod_produto;
 
R_desc_prod C_desc_prod%ROWTYPE;  
 
BEGIN  
OPEN C_desc_prod;
        FETCH C_desc_prod INTO R_desc_prod;  
		if c_desc_prod%notfound THEN return('não encontrou');
		end if;
CLOSE C_desc_prod;  

Return ( R_desc_prod.Descricao );
END;

SELECT fn_desc_prod(*) FROM dual; --item 2

SELECT fn_desc_prod(idproduto) FROM produto; -- todos os itens

-- 2.Faça uma função que retorne a quantidade de produtos ativos
Create or replace function fn_quant_prod
--(Param_quant_produto in Number)  
Return Number 
IS  
    Cursor C_quant_prod IS  
    SELECT COUNT(produto.IdProduto) quantidade
    FROM Produto
    WHERE Produto.ProdAtivoInativo = 'a';
 
R_quant_prod C_quant_prod%ROWTYPE;  
 
BEGIN  
OPEN C_quant_prod;
        FETCH C_quant_prod INTO R_quant_prod;  
		if C_quant_prod%notfound THEN return('não encontrou');
		end if;
CLOSE C_quant_prod;  

Return (R_quant_prod.quantidade);
END;

SELECT fn_quant_prod() FROM dual; 

--3. Faça uma função que mostre o produto de maior valor:
Create or replace function fn_maiorValor
--(Param_quant_produto in Number)  
Return Number 
IS  
    Cursor C_maiorValor IS  
    SELECT MAX(produto.ValorProduto) valorMaior
    FROM Produto;    
 
R_maiorValor C_maiorValor%ROWTYPE;  
 
BEGIN  
OPEN C_maiorValor;
        FETCH C_maiorValor INTO R_maiorValor;  
		if C_maiorValor%notfound THEN return('não encontrou');
		end if;
CLOSE C_maiorValor;  

Return (R_maiorValor.valorMaior);
END;

SELECT fn_maiorValor() FROM dual; 

--4.  Faça uma procedure que ative ou inative um produto. Passe como parâmetro o IdProduto.

create or replace procedure prc_ativarInativar
	(
    param_IdProduto IN number,
    param_AtivoInativo IN varchar2
 	)
IS 
	BEGIN
	UPDATE Produto set  ProdAtivoInativo = param_AtivoInativo
	where Produto.IdProduto = param_IdProduto;
	END;

    exec prc_ativarInativar(1, 'a');
	exec prc_ativarInativar(8, 'i')
select*from Produto;

--5 Faça uma procedure que aumente em 10% o valor de um determinado produto. Passe como parâmetro o IdProduto.

CREATE OR REPLACE PROCEDURE prc_aum10(param_IdProduto IN NUMBER)
IS 
BEGIN
    UPDATE Produto 
    SET valorProduto = valorProduto + valorProduto * 10 / 100
    WHERE IdProduto = param_IdProduto;
END;

EXEC prc_aum10(3);
select*from Produto;

--6 Altere a procedure da questão 5, o usuário deve informar o percentual de aumento entre 10 e 100%.

CREATE OR REPLACE PROCEDURE prc_aum_percentual(
    param_IdProduto IN NUMBER,
    param_Percentual IN NUMBER
)
IS 
BEGIN
    -- Verificar se o percentual está entre 10 e 100
    --IF param_Percentual < 10 OR param_Percentual > 100 THEN
    --    RAISE_APPLICATION_ERROR(-20001, 'O percentual deve estar entre 10 e 100.');
    --END IF;
    
    UPDATE Produto 
    SET valorProduto = valorProduto + valorProduto * param_Percentual / 100
    WHERE IdProduto = param_IdProduto;
END;

-- Para executar a procedure com um percentual de aumento, por exemplo 15%:
EXEC prc_aum_percentual(3, 15);

--7. Faça uma procedure que delete os produtos. Passe como parâmetro o IdProduto.
CREATE OR REPLACE PROCEDURE prc_deletaproduto(
    param_prod IN NUMBER,
    param_del OUT NUMBER
)
IS 
BEGIN
    -- Contar o número de produtos com o IdProduto especificado
    SELECT COUNT(1) INTO param_del 
    FROM Produto 
    WHERE IdProduto = param_prod;

    -- Se existir pelo menos um produto, deletar
    IF param_del > 0 THEN
        DELETE FROM Produto 
        WHERE IdProduto = param_prod;

        -- Retornar o número de produtos deletados
        --param_del := 1; -- Assumindo que se deletou apenas um produto
    --ELSE
     --   param_del := 0; -- Nenhum produto encontrado para deletar
    END IF;
END;


-- Bloco para executar a procedure e exibir o resultado
DECLARE
    v_del NUMBER(4) := -1;
BEGIN
    -- Chamar a procedure para deletar o produto com IdProduto igual a 4
    prc_deletaproduto(4, v_del);
    
    -- Exibir o número de produtos deletados
    DBMS_OUTPUT.PUT_LINE('Produtos deletados: ' || v_del);
END;
-- 7.1 Bruna) Faça uma procedure que delete os produtos. Passe como parâmetro o idProduto

create or replace procedure deletaProdutos
(
    param_IdProduto in number
)
is
begin
delete from Produto where IdProduto = param_IdProduto;
end;

exec deletaProdutos(4);
select * from Produto;

CREATE TABLE Orcamento (
    IdOrcamento NUMBER(5),
    DescricaoOrcamento VARCHAR2(100),
    ValorOrcamento NUMBER(12,2),
    IdProduto NUMBER(5),  -- Adicionada definição para IdProduto
    CONSTRAINT ORCAMENTO_PK PRIMARY KEY (IdOrcamento),
    CONSTRAINT Orcamento_Produto_fk FOREIGN KEY (IdProduto) REFERENCES Produto(IdProduto));


insert into Orcamento values(1,'Orcamento1', 2560, 1);
insert into Orcamento values(2,'Orcamento2', 200, 2, 2);
insert into Orcamento values(3,'Orcamento3', 1800, 3);
insert into Orcamento values(4,'Orcamento4', 560, 4);
insert into Orcamento values(5,'Orcamento5', 236, 5);
insert into Orcamento values(6,'Orcamento6', 12, 6);
insert into Orcamento values(7,'Orcamento7', 98, 7);
insert into Orcamento values(8,'Orcamento8', 19, 8);
insert into Orcamento values(9,'Orcamento9', 36, 9);
insert into Orcamento values(10,'Orcamento10', 15, 10);

--8. Faça uma função que retorna a descrição do orçamento, o valor do orçamento e a descrição do produto. Use cursor.

CREATE OR REPLACE FUNCTION fn_descOrcamento (
    param_idOrcamento IN NUMBER,
    param_valorOrcam OUT NUMBER,
    param_descProduto OUT VARCHAR2
) RETURN VARCHAR2 IS
    CURSOR c_orcamento IS
        SELECT Orcamento.DescricaoOrcamento, Orcamento.ValorOrcamento, Produto.Descricao
        FROM Orcamento, Produto
        WHERE Orcamento.IdProduto = Produto.IdProduto
        AND Orcamento.IdOrcamento = param_idOrcamento;

    v_descOrcamento Orcamento.DescricaoOrcamento%TYPE;
    v_valorOrcamento Orcamento.ValorOrcamento%TYPE;
    v_descProduto Produto.Descricao%TYPE;

BEGIN
    OPEN c_orcamento;
    FETCH c_orcamento INTO v_descOrcamento, v_valorOrcamento, v_descProduto;

    IF c_orcamento%FOUND THEN
        param_valorOrcam := v_valorOrcamento;
        param_descProduto := v_descProduto;
        RETURN v_descOrcamento; -- Retorna a descrição do orçamento
    ELSE
        RETURN 'Orçamento não encontrado';
    END IF;

    CLOSE c_orcamento;

EXCEPTION
    WHEN OTHERS THEN
        CLOSE c_orcamento;
        RETURN SQLERRM;
END fn_descOrcamento;

DECLARE
    v_valorOrcam NUMBER;
    v_descProduto VARCHAR2(100);
    v_descOrcamento VARCHAR2(100);
    v_idOrcamento NUMBER := 1; -- Altere para o ID do orçamento desejado
BEGIN
    -- Chama a função passando o ID do orçamento
    v_descOrcamento := fn_descOrcamento(v_idOrcamento, v_valorOrcam, v_descProduto);

    -- Exibe os resultados
    DBMS_OUTPUT.PUT_LINE('Descrição do Orçamento: ' || v_descOrcamento);
    DBMS_OUTPUT.PUT_LINE('Valor do Orçamento: ' || v_valorOrcam);
    DBMS_OUTPUT.PUT_LINE('Descrição do Produto: ' || v_descProduto);
    
END;

--9. Faça uma função que retorne o produto com o maior orçamento.
CREATE OR REPLACE FUNCTION fn_produtoMaiorOrcamento
RETURN VARCHAR2 
IS  
    v_descricao VARCHAR2(100);
    v_maiorValorOrc NUMBER;
BEGIN  
    -- Seleciona o maior valor de orçamento
    SELECT MAX(ValorOrcamento) 
    INTO v_maiorValorOrc
    FROM Orcamento;

    -- Verifica se não encontrou orçamentos
    --IF v_maiorValorOrc IS NULL THEN
      --  RETURN 'Nenhum orçamento encontrado'; -- Retorna mensagem se não houver orçamentos
    --END IF;

    -- Seleciona o nome do produto que corresponde ao maior orçamento
    SELECT Descricao
    INTO v_descricao
    FROM Produto 
    WHERE IdProduto = (
        SELECT IdProduto 
        FROM Orcamento 
        WHERE ValorOrcamento = v_maiorValorOrc);
        --AND ROWNUM = 1  -- Limita a um produto caso haja mais de um com o mesmo orçamento
 

    -- Retorna o nome do produto
    RETURN (v_descricao);

--EXCEPTION
 --   WHEN NO_DATA_FOUND THEN
     --   RETURN 'Nenhum produto encontrado'; -- Retorna mensagem se não houver produtos
   -- WHEN OTHERS THEN
   --     RETURN 'Erro ao buscar produto'; -- Retorna mensagem em caso de erro
END fn_produtoMaiorOrcamento;


SELECT fn_produtoMaiorOrcamento() AS DescricaoProdutoMaiorOrcamento FROM dual;

--9.1 Faça uma função que retorne o produto com o maior orçamento.Esse com cursor

CREATE OR REPLACE FUNCTION maiorOrcamento
RETURN VARCHAR2
IS
    v_nomeProduto VARCHAR2(100);
    v_maiorValor NUMBER;

    CURSOR c_maiorOrcamento IS
        SELECT IdProduto, ValorOrcamento
        FROM Orcamento
        WHERE ValorOrcamento = (SELECT MAX(ValorOrcamento) FROM Orcamento);

    v_idProduto NUMBER;

BEGIN
    OPEN c_maiorOrcamento;
    FETCH c_maiorOrcamento INTO v_idProduto, v_maiorValor;

    IF c_maiorOrcamento%NOTFOUND THEN
        CLOSE c_maiorOrcamento;
        RETURN 'Nenhum orçamento encontrado'; -- Mensagem se não houver orçamentos
    END IF;

    -- Busca o nome do produto associado ao IdProduto encontrado
    SELECT Descricao
    INTO v_nomeProduto
    FROM Produto
    WHERE IdProduto = v_idProduto;

    CLOSE c_maiorOrcamento;
    RETURN v_nomeProduto; -- Retorna o nome do produto associado ao maior orçamento

--EXCEPTION
    --WHEN NO_DATA_FOUND THEN
    --    RETURN 'Nenhum produto encontrado'; -- Mensagem se não houver produtos correspondentes
   -- WHEN OTHERS THEN
     --   RETURN 'Erro ao buscar produto'; -- Mensagem em caso de erro geral
END maiorOrcamento;
    
SELECT maiorOrcamento() AS NomeProdutoMaiorOrcamento FROM dual;

--9.2. Faça uma função que retorne o produto com o maior orçamento.

CREATE OR REPLACE FUNCTION fn_maiorOrcamento
RETURN VARCHAR2
IS
    v_descricao VARCHAR2(100);
    v_maiorValor NUMBER;
    v_idProduto NUMBER;
BEGIN
    -- Busca o maior valor do orçamento
    SELECT MAX(ValorOrcamento) INTO v_maiorValor
    FROM Orcamento;

    -- Verifica se foi encontrado algum orçamento
    --IF v_maiorValor IS NULL THEN
       -- RETURN 'Nenhum orçamento encontrado';
    --END IF;

    -- Busca o IdProduto correspondente ao maior orçamento
    SELECT IdProduto INTO v_idProduto
    FROM Orcamento
    WHERE ValorOrcamento = v_maiorValor;

    -- Busca a descrição do produto
    SELECT Descricao INTO v_descricao
    FROM Produto
    WHERE IdProduto = v_idProduto;

    RETURN v_descricao;
--EXCEPTION
    --WHEN NO_DATA_FOUND THEN
    --    RETURN 'Nenhum produto encontrado';
    --WHEN OTHERS THEN
    --    RETURN 'Erro ao buscar produto';
END fn_maiorOrcamento;

SELECT fn_maiorOrcamento() AS produtomaiororcamento from dual;

--10. Faça uma procedeure que retorna o nome do produto. Passe como parâmetro o código do produto.

CREATE OR REPLACE PROCEDURE prc_obter_nome_produto (
    param_idProduto IN NUMBER,
    param_nomeProduto OUT VARCHAR2
) IS
BEGIN
    -- Busca o nome do produto pelo ID
    SELECT Descricao INTO param_nomeProduto
    FROM Produto
    WHERE IdProduto = param_idProduto;

--EXCEPTION
  --  WHEN NO_DATA_FOUND THEN
    --    p_nomeProduto := 'Produto não encontrado';
    --WHEN OTHERS THEN
    --    p_nomeProduto := 'Erro ao buscar produto';
END prc_obter_nome_produto;


--Executar a procedure
DECLARE
    v_nomeProduto VARCHAR2(100);
BEGIN
    prc_obter_nome_produto(1, v_nomeProduto); -- substitua 1 pelo código do produto desejado
    DBMS_OUTPUT.PUT_LINE('Nome do Produto: ' || v_nomeProduto);
END;



9.3 Bruna    CREATE OR REPLACE FUNCTION fn_maiorOrcamento
RETURN VARCHAR2
IS
    v_descricao VARCHAR2(100);
    v_maiorValor NUMBER;
    v_idProduto NUMBER;
BEGIN
    -- Busca o maior valor do orçamento
    SELECT MAX(ValorOrcamento) INTO v_maiorValor
    FROM Orcamento;

    -- Verifica se foi encontrado algum orçamento
    --IF v_maiorValor IS NULL THEN
       -- RETURN 'Nenhum orçamento encontrado';
    --END IF;

    -- Busca o IdProduto correspondente ao maior orçamento
    SELECT IdProduto INTO v_idProduto
    FROM Orcamento
    WHERE ValorOrcamento = v_maiorValor;

    -- Busca a descrição do produto
    SELECT Descricao INTO v_descricao
    FROM Produto
    WHERE IdProduto = (SELECT IdProduto FROM Orcamento WHERE ValorOrcamento = v_maiorValor);

    RETURN v_descricao;
	
--EXCEPTION
    --WHEN NO_DATA_FOUND THEN
    --    RETURN 'Nenhum produto encontrado';
    --WHEN OTHERS THEN
    --    RETURN 'Erro ao buscar produto';
END fn_maiorOrcamento;

SELECT fn_maiorOrcamento() AS produtomaiororcamento from dual;
